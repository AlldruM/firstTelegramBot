import telebot
from telebot import types
import datetime
import time
from threading import Thread
import cfg

bot = telebot.TeleBot(cfg.TOKEN)

users = []
user = cfg.CHAT_TEST_ID
const = 365
dembel = 103


@bot.message_handler(commands=['start','description','help']) # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ /start –≤ –±–æ—Ç–µ
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn2 = types.KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ")
    btn3 = types.KeyboardButton("–ü–æ–º–æ—â—å")
    markup.row(btn2, btn3)
    bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞',  reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callbackMessage(callback):
    if callback.data == 'delete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'answer':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delete")
        markup.row(btn1)
        btn2 = types.InlineKeyboardButton("–û—Ç–ª–∏—á–Ω–æ", callback_data="good")
        btn3 = types.InlineKeyboardButton("–£—Å—Ç–∞–ª, —Ö–æ—á—É –∫—É—à–∞—Ç—å –∏ —Å–ø–∞—Ç—å", callback_data="tired")
        markup.row(btn2, btn3)
        bot.edit_message_text('–ù–µ–ø–ª–æ—Ö–æ, –∫–∞–∫ —É –í–∞—Å –¥–µ–ª–∞?', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
    elif callback.data == 'good':
            markUp = types.InlineKeyboardMarkup()
            btn1_1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delete")
            markUp.row(btn1_1)
            bot.edit_message_text('–Ø –æ—á–µ–Ω—å —Ä–∞–¥. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å', callback.message.chat.id, callback.message.message_id, reply_markup=markUp)
    elif callback.data == 'tired':
            markUp = types.InlineKeyboardMarkup()
            btn1_1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delete")
            markUp.row(btn1_1)
            bot.edit_message_text('–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—Å–µ –±—Ä–æ—Å–∏—Ç—å –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è!', callback.message.chat.id, callback.message.message_id, reply_markup=markUp)
    elif callback.data == 'edit':
            bot.edit_message_text('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ <span class="tg-spoiler">(–û—Ç—Å—ã–ª–û–ß–ö–ê –Ω–∞ –Ø–Ω–¥–µ–∫—Å)</span>', callback.message.chat.id, callback.message.message_id, parse_mode='HTML')


@bot.message_handler(commands=['start', 'help'])
def start(message):
    user = message.chat.id
    bot.send_message(user, "https://www.youtube.com/watch?v=rdg4lkgsQ04")

@bot.message_handler(commands=['spam'])
def add_user(message):
    global user
    global const,dembel
    user = message.chat.id
    offset = datetime.timedelta(hours=3)
    immediately = datetime.datetime.now(tz=datetime.timezone(offset, 'MSK'))
    cuurent_date = immediately.strftime("%d.%m.%Y %H:%M:%S")
    if user not in users:
        users.append(user)
    #bot.send_message(user, f'#–∏–≥–æ—Ä—å–¥–µ–º–±–µ–ª—å{const - dembel}')
    bot.send_message(user, f'–° —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, –∞ –∏–º–µ–Ω–Ω–æ {cuurent_date}, —è –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ –¥–æ –¥–µ–º–±–µ–ª—è –ò–≥–æ—Ä—èü´°. –ù–∞–¥–µ—é—Å—å, —è –±—É–¥—É —ç—Ç–æ –¥–µ–ª–∞—Ç—å –∏—Å–ø—Ä–∞–≤–Ω–æ!')
    bot.send_message(user, f'#–∏–≥–æ—Ä—å–¥–µ–º–±–µ–ª—å{const - dembel}')

@bot.message_handler(commands=['stop'])
def remove_user(message):
    user = message.chat.id
    users.remove(user)
    bot.send_message(user, "–í—Å–µ, –≤—Å–µ.")

def spam():
    global users
    offset = datetime.timedelta(hours=3)
    global const, dembel
    while True:
        immediately = datetime.datetime.now(tz=datetime.timezone(offset, 'MSK'))
        current_time = immediately.strftime("%H:%M")
        for user in users:
            if dembel == const:
                bot.send_message(user, '–í—Å—ë, –≤—Å–µ—Ö –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –ì–æ–¥ –ø—Ä–æ—à—ë–ª, —é—Ö—É-—É-—É!')
                file = open('./Vse_GIF.mp4', 'rb')
                bot.send_animation(user, file)
                users.remove(user)
            elif current_time == '18:55':
                bot.send_message(user, f'#–∏–≥–æ—Ä—å–¥–µ–º–±–µ–ª—å{const - dembel}')
                time.sleep(24*3600) # –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã—à–µ
                dembel=dembel+1

@bot.message_handler(content_types='text')
def info(message):
    if message.text.lower() =='–ø—Ä–∏–≤–µ—Ç' or message.text.lower() =='–∫—É':
        markUp = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='delete')
        markUp.row(btn1)
        btn2 = types.InlineKeyboardButton("–ö–∞–∫ –¥–µ–ª–∞?", callback_data='answer')
        btn3 = types.InlineKeyboardButton("–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?", callback_data="edit")
        markUp.row(btn2, btn3)
        bot.send_message(message.chat.id, f'–¢—ã –¥–æ–±—Ä, {message.from_user.first_name} {message.from_user.last_name}',
                         reply_markup=markUp)
    elif message.text.lower() =='–æ–ø–∏—Å–∞–Ω–∏–µ':
        bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ –¥–Ω–µ–π –¥–æ –¥–µ–º–±–µ–ª—è –ò–≥–æ—Ä—èü´°')
    elif message.text.lower() =='–ø–æ–º–æ—â—å':
        bot.send_message(message.chat.id, '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º, –Ω–∞—Å—á—ë—Ç –±–æ—Ç–∞, –æ–±—Ä–∞—â–∞—Ç—å—Å—è: https://t.me/AlldruM')
    elif message.text.lower() != '–ø—Ä–∏–≤–µ—Ç' or message.text.lower() != '–∫—É':
        file = open('./AnimatedSticker.tgs', 'rb')
        bot.send_sticker(message.chat.id, file)


spam_thread = Thread(target=spam)

spam_thread.start()
bot.polling(none_stop=True) # –æ–ø—Ä–æ—Å –º–µ—Ç–æ–¥–æ–º polling(—Å –∞–Ω–≥–ª. - –æ–ø—Ä–æ—Å) —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º none_stop - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
